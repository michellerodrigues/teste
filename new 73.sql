create or replace PROCEDURE     SP_AGENDA_SOB_DEMANDA
/*---------------------------------------------------------------------------------------------------------------------------
            AUTOR:         FRANCO P GONCALES
            DATA CRIACAO:  23/06/2017
            OBJETIVO:      FAZER UM AGENDAMENTO CONTENDO UMA EQUIPE PARA REALIZAR O PROCEDIMENTO.
            ULTIMAS ALTERACOES:
            DATA       NOME              OBJETIVO
            22/08/2017 EDSON MORAIS      INCLUSAO DO PARAMETRO P_OBSERVACAO_AGENDAMENTO
            01/09/2017 JAELSON FILHO     ALTERACAO PARA CONSIDERAR A DISPONIBILIDADE DOS RECURSOS NO MOMENTO DE CANCELAMENTO
            27/10/2017 JAELSON FILHO     ALTERACAO PARA ATUALIZAR AGENDAS CANCELADAS POR UM AGENDAMENTO SOB DEMANDA
            05/12/2017 LAMERICANO        CÓPIA DE AGENDAMENTO PARA MÉDICO DO PACIENTE
  ----------------------------------------------------------------------------------------------------------------------------*/
(P_CUSTOMER_ID              IN VARCHAR2,
 P_ID_PACIENTE              IN NUMBER,
 P_PRESTADORES              IN VARCHAR2,
 P_ID_TIPO_PROCEDIMENTO     IN NUMBER,
 P_ID_LOCAL                 IN NUMBER,
 P_ID_RECURSOS              IN VARCHAR2,
 P_DATA                     IN DATE,
 P_ID_USU_ACAO              IN NUMBER,
 P_TEMPO_PROCEDIMENTO       IN NUMBER,
 P_ORIENTACAO               IN VARCHAR2,
 P_FL_CANCELAR_CONF         IN VARCHAR2,
 P_OBSERVACAO_AGENDAMENTO   IN VARCHAR2,
 P_ID_PROCEDIMENTO_ANTERIOR IN NUMBER,
 P_AGENDA_CANC_DEMANDA      OUT VARCHAR2,
 P_AGENDA_CANC_PROCEDI      OUT VARCHAR2,
 P_AGENDA_CANC              OUT VARCHAR2,
 P_AGENDA_PRINCIPAL         OUT VARCHAR2
 
 ) IS

  LISTA_PRESTADORES            PSP.SPLIT_TBL;
  LISTA_RECURSOS               PSP.SPLIT_TBL;
  V_SEQ_AGENDA_ID              NUMBER;
  V_SEQ_PROCEDIMENTO_ID        NUMBER;
  V_SEQ_AGENDA_PROCEDIMENTO_ID NUMBER;
  V_AGENDAMENTO_PRINCIPAL      NUMBER;
  V_PRESTADOR_PRINCIPAL        NUMBER;
  V_MEMBER_ID                  VARCHAR2(20);
  V_CLIENT_ID                  VARCHAR2(20);
  V_CLIENT_GROUP_ID            VARCHAR2(20);
  V_AGENDAS_CANCELADAS         VARCHAR2(400);
  V_AGENDAS_CANC_DEMAND        VARCHAR2(400);
  V_AGENDAS_CANC_PROC          VARCHAR2(400);
  V_DATA_TERMINO               DATE := (P_DATA +
                                       ((P_TEMPO_PROCEDIMENTO - 1) / 1440));

  V_ID_PRESTADOR_PACIENTE   NUMBER;
  
  R_TIPO_PROC               PSP.TIPO_PROCEDIMENTO%ROWTYPE;

  ERR_AGENDA_DEMANDA_CONFLITO EXCEPTION;

  CURSOR C_CANCELAR_AGENDA_DISPONIVEIS(PPRESTADOR IN NUMBER) IS
    SELECT A.ID_AGENDA, A.AGENDAMENTO_DEMANDA
      FROM PSP.AGENDA A
      LEFT JOIN PSP.PROCEDIMENTOS PRO
        ON PRO.ID_AGENDA = A.ID_AGENDA
      LEFT JOIN PSP.PRESTADORES PRE
        ON A.ID_PRESTADOR = PRE.ID_PRESTADOR
      LEFT JOIN PSP.TIPO_PROCEDIMENTO TP
        ON TP.ID_TIPO_PROCEDIMENTO =
           NVL(A.ID_TIPO_PROCEDIMENTO, PRO.ID_TIPO_PROCEDIMENTO)
     WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
       AND A.ID_PRESTADOR = PPRESTADOR
       AND ((DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440)) BETWEEN P_DATA AND
           V_DATA_TERMINO OR (DT_AGENDA) BETWEEN P_DATA AND V_DATA_TERMINO OR
           (P_DATA BETWEEN A.DT_AGENDA AND
           (A.DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440))))
       AND A.DT_CANCELAMENTO IS NULL
       AND NOT EXISTS (SELECT 1
              FROM PSP.AGENDA_PROCEDIMENTO AP
              JOIN PSP.PROCEDIMENTOS P1
                ON P1.ID_PROCEDIMENTO = AP.ID_PROCEDIMENTO
             WHERE AP.ID_AGENDA = A.ID_AGENDA
               AND P1.DT_CANCELAMENTO IS NULL)
       AND NOT EXISTS (SELECT 1
              FROM PSP.PROCEDIMENTOS PRO2
             WHERE pro2.id_agenda = a.id_agenda
               AND pro2.dt_cancelamento IS NULL)
     GROUP BY A.ID_AGENDA, A.AGENDAMENTO_DEMANDA;
  CURSOR C_CANCELAR_AGENDA(PPRESTADOR IN NUMBER) IS
    SELECT A.ID_AGENDA, A.AGENDAMENTO_DEMANDA, PRO.ID_PROCEDIMENTO
      FROM PSP.AGENDA A
      LEFT JOIN PSP.PROCEDIMENTOS PRO
        ON PRO.ID_AGENDA = A.ID_AGENDA
      LEFT JOIN PSP.PRESTADORES PRE
        ON A.ID_PRESTADOR = PRE.ID_PRESTADOR
      LEFT JOIN PSP.TIPO_PROCEDIMENTO TP
        ON TP.ID_TIPO_PROCEDIMENTO =
           NVL(A.ID_TIPO_PROCEDIMENTO, PRO.ID_TIPO_PROCEDIMENTO)
     WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
       AND A.ID_PRESTADOR = PPRESTADOR
       AND ((DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440)) BETWEEN P_DATA AND
           V_DATA_TERMINO OR (DT_AGENDA) BETWEEN P_DATA AND V_DATA_TERMINO OR
           (P_DATA BETWEEN A.DT_AGENDA AND
           (A.DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440))))
       AND A.DT_CANCELAMENTO IS NULL
       AND PRO.DT_CANCELAMENTO IS NULL
    
    UNION
    
    --CONFLITOS DE RECURSOS
    SELECT A.ID_AGENDA, A.AGENDAMENTO_DEMANDA, PRO.ID_PROCEDIMENTO
      FROM PSP.AGENDA A
      JOIN PSP.AGENDA_RECURSOS AR
        ON AR.CUSTOMER_ID = A.CUSTOMER_ID
       AND AR.ID_AGENDA = A.ID_AGENDA
      JOIN PSP.RECURSOS R
        ON R.CUSTOMER_ID = AR.CUSTOMER_ID
       AND R.ID_RECURSO = AR.ID_RECURSO
      LEFT JOIN PSP.PROCEDIMENTOS PRO
        ON PRO.ID_AGENDA = A.ID_AGENDA
      LEFT JOIN PSP.PRESTADORES PRE
        ON A.ID_PRESTADOR = PRE.ID_PRESTADOR
      LEFT JOIN PSP.TIPO_PROCEDIMENTO TP
        ON TP.ID_TIPO_PROCEDIMENTO =
           NVL(A.ID_TIPO_PROCEDIMENTO, PRO.ID_TIPO_PROCEDIMENTO)
     WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
       AND PSP.FN_RECURSO_DISPONIVEL(A.CUSTOMER_ID,
                                     AR.ID_RECURSO,
                                     A.DT_AGENDA,
                                     (A.DT_AGENDA +
                                     ((A.TEMPO_ATENDIMENTO - 1) / 1440)),
                                     'S') = 'N'
          
       AND ((DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440)) BETWEEN P_DATA AND
           V_DATA_TERMINO OR (DT_AGENDA) BETWEEN P_DATA AND V_DATA_TERMINO OR
           (P_DATA BETWEEN A.DT_AGENDA AND
           (A.DT_AGENDA + ((A.TEMPO_ATENDIMENTO - 1) / 1440))))
       AND A.DT_CANCELAMENTO IS NULL
       AND PRO.DT_CANCELAMENTO IS NULL
       AND AR.ID_RECURSO IN
           (SELECT DISTINCT REGEXP_SUBSTR(P_ID_RECURSOS, '[^,]+', 1, LEVEL) AS ID_RECURSO
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(P_ID_RECURSOS, '[^,]+', 1, LEVEL) IS NOT NULL);

  PROCEDURE VINCULAR_AGENDA(P_ID_AGENDA_COPIA NUMBER) IS
  
  BEGIN
  
    --VINCULA AGENDA AO PROCEDIMENTO COM FLAG DE ACOMPANHAMENTO 'S'
    INSERT INTO PSP.AGENDA_PROCEDIMENTO
      (ID, ID_AGENDA, ID_PROCEDIMENTO, FL_ACOMPANHAMENTO)
    VALUES
      (PSP.SEQ_AGENDA_PROCEDIMENTO.NEXTVAL,
       P_ID_AGENDA_COPIA,
       V_SEQ_PROCEDIMENTO_ID,
       'S');
  
  END;

  PROCEDURE COPIAR_AGENDA(P_ID_PRESTADOR_COPIA NUMBER,
                          P_VERIF_DISP         VARCHAR2 DEFAULT 'N')
  
   IS
  
    E_PREST_JA_ASSOCIADO EXCEPTION;
    V_ID_AGENDA_COPIA NUMBER := NULL;
  
  BEGIN
  
    FOR I IN LISTA_PRESTADORES.FIRST .. LISTA_PRESTADORES.LAST LOOP
    
      IF P_ID_PRESTADOR_COPIA = LISTA_PRESTADORES(I) THEN
        --PRESTADOR JÁ ASSOCIADO AO AGENDAMENTO, NÃO É NECESSÁRIO COPIAR AGENDA
        RAISE E_PREST_JA_ASSOCIADO;
      END IF;
    
    END LOOP;
  
    IF P_VERIF_DISP = 'N' THEN
      --SE NÃO FOR DE ACORDO COM A DISPONIBILIDADE ENTÃO SE CRIA UMA AGENDA
    
      SELECT PSP.SEQ_AGENDA.NEXTVAL INTO V_ID_AGENDA_COPIA FROM DUAL;
    
      --GERAR CÓPIA DE AGENDA PARA PRESTADOR
      INSERT INTO PSP.AGENDA
        (CUSTOMER_ID,
         ID_AGENDA,
         DT_AGENDA,
         ID_PRESTADOR,
         ID_TIPO_PROCEDIMENTO,
         ID_LOCALIZACAO,
         AGENDAMENTO_DEMANDA,
         QTDE_PREV_ATENDIMENTOS,
         TEMPO_ATENDIMENTO,
         DS_ORIENTACAO_PACIENTE,
         FL_CONFLITOS_CANCELADOS)
        SELECT CUSTOMER_ID,
               V_ID_AGENDA_COPIA,
               DT_AGENDA,
               P_ID_PRESTADOR_COPIA,
               ID_TIPO_PROCEDIMENTO,
               ID_LOCALIZACAO,
               AGENDAMENTO_DEMANDA,
               QTDE_PREV_ATENDIMENTOS,
               TEMPO_ATENDIMENTO,
               DS_ORIENTACAO_PACIENTE,
               FL_CONFLITOS_CANCELADOS
          FROM PSP.AGENDA A
         WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
           AND A.ID_AGENDA = V_AGENDAMENTO_PRINCIPAL;
    
    ELSE
    
      BEGIN
      
        SELECT A.ID_AGENDA
          INTO V_ID_AGENDA_COPIA
          FROM PSP.AGENDA A
         WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
           AND A.ID_PRESTADOR = P_ID_PRESTADOR_COPIA
           AND A.DT_AGENDA = P_DATA
           AND A.DT_CANCELAMENTO IS NULL
           AND (A.ID_TIPO_PROCEDIMENTO = P_ID_TIPO_PROCEDIMENTO OR
               P_ID_TIPO_PROCEDIMENTO IN
               (SELECT ATP.ID_TIPO_PROCEDIMENTO
                   FROM PSP.AGENDA_TIPOS_PROCEDIMENTOS ATP
                  WHERE ATP.CUSTOMER_ID = A.CUSTOMER_ID
                    AND ATP.ID_AGENDA = A.ID_AGENDA))
           AND NOT EXISTS (SELECT 1
                  FROM PSP.PROCEDIMENTOS P
                 WHERE P.CUSTOMER_ID = P_CUSTOMER_ID
                   AND P.ID_AGENDA = A.ID_AGENDA)
           AND NOT EXISTS
         (SELECT 1
                  FROM PSP.AGENDA_PROCEDIMENTO AP
                  JOIN PSP.PROCEDIMENTOS PROC
                    ON PROC.ID_PROCEDIMENTO = AP.ID_PROCEDIMENTO
                 WHERE AP.ID_AGENDA = A.ID_AGENDA
                   AND PROC.DT_CANCELAMENTO IS NULL
                   AND NVL(AP.FL_ACOMPANHAMENTO, 'N') = 'N')
           AND ROWNUM <= 1;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ID_AGENDA_COPIA := NULL;
      END;
    
    END IF;
  
    IF V_ID_AGENDA_COPIA IS NOT NULL THEN
    
      VINCULAR_AGENDA(V_ID_AGENDA_COPIA);
    
    END IF;
  
  EXCEPTION
    WHEN E_PREST_JA_ASSOCIADO THEN
      NULL;
    
  END;

BEGIN

  SELECT UM.MEMBER_ID, UM.CLIENT_ID, UM.CLIENT_GROUP_ID
    INTO V_MEMBER_ID, V_CLIENT_ID, V_CLIENT_GROUP_ID
    FROM ACESSO.USUARIO_MEMBER UM
   WHERE UM.USU_ID = P_ID_PACIENTE;
  SELECT PSP.SEQ_PROCEDIMENTOS.NEXTVAL
    INTO V_SEQ_PROCEDIMENTO_ID
    FROM DUAL;

  SELECT *
    INTO R_TIPO_PROC
    FROM PSP.TIPO_PROCEDIMENTO TP
   WHERE TP.ID_TIPO_PROCEDIMENTO = P_ID_TIPO_PROCEDIMENTO;
   
  LISTA_PRESTADORES := SPLIT2(P_PRESTADORES);

  --LOOP PARA INSERIR NA TABELA DE AGENDA
  FOR I IN LISTA_PRESTADORES.FIRST .. LISTA_PRESTADORES.LAST LOOP
  
    SELECT SEQ_AGENDA.NEXTVAL INTO V_SEQ_AGENDA_ID FROM DUAL;
  
    IF (I = 1) THEN
      V_AGENDAMENTO_PRINCIPAL := V_SEQ_AGENDA_ID;
      V_PRESTADOR_PRINCIPAL   := LISTA_PRESTADORES(I);
    END IF;
  
    -- CANCELO AGENDAS DISPONÍVEIS SEM PROCEDIMENTOS AGENDADOS
    FOR AGENDA_DISP IN C_CANCELAR_AGENDA_DISPONIVEIS(LISTA_PRESTADORES(I)) LOOP
      PSP.SP_INATIVAR_AGENDAMENTO(P_CUSTOMER_ID         => P_CUSTOMER_ID,
                                  P_ID_AGENDA           => AGENDA_DISP.ID_AGENDA,
                                  P_ID_MOTIVO           => NULL,
                                  P_ID_USU_CANCELAMENTO => P_ID_USU_ACAO,
                                  P_ID_USU_PACIENTE     => P_ID_PACIENTE);
    
      -- INSERE NA TABELA DE CONFLITOS QUAIS AGENDAS FORAM CANCELADAS
      INSERT INTO PSP.AGENDA_SOB_DEMANDA_CONFLITO
        (CUSTOMER_ID,
         ID_AGENDA,
         ID_AGENDA_CANCELADA,
         ID_PROCEDIMENTO,
         FL_AGENDA_SOB_DEMANDA)
      VALUES
        (P_CUSTOMER_ID,
         V_AGENDAMENTO_PRINCIPAL,
         AGENDA_DISP.ID_AGENDA,
         NULL,
         'N');
      V_AGENDAS_CANCELADAS := V_AGENDAS_CANCELADAS || ',' ||
                              AGENDA_DISP.ID_AGENDA;
    END LOOP;
  
    IF P_FL_CANCELAR_CONF = 'S' THEN
      --CANCELO OS AGENDAMENTOS QUE  ESTÃO CONFLITANDO DO PRESTADOR
      FOR AGENDA IN C_CANCELAR_AGENDA(LISTA_PRESTADORES(I)) LOOP
      
        PSP.SP_INATIVAR_AGENDAMENTO(P_CUSTOMER_ID         => P_CUSTOMER_ID,
                                    P_ID_AGENDA           => AGENDA.Id_Agenda,
                                    P_ID_MOTIVO           => NULL,
                                    P_ID_USU_CANCELAMENTO => P_ID_USU_ACAO,
                                    P_ID_USU_PACIENTE     => P_ID_PACIENTE);
      
        UPDATE PSP.PROCEDIMENTOS PRO
           SET PRO.ST_PROCEDIMENTO         = 'R',
               PRO.OBSERVACAO_CANCELAMENTO = 'Cancelado por agendamento sob demanda'
         WHERE PRO.ID_PROCEDIMENTO = AGENDA.ID_PROCEDIMENTO;
      
        --AGENDAMENTOS QUE SÂO DEMANDA E ESTÂO CONFLITANDO.
        IF (AGENDA.AGENDAMENTO_DEMANDA = 'S') THEN
          V_AGENDAS_CANC_DEMAND := V_AGENDAS_CANC_DEMAND || ',' ||
                                   AGENDA.ID_AGENDA;
          -- INSERE NA TABELA DE CONFLITOS QUAIS AGENDAS FORAM CANCELADAS
          INSERT INTO PSP.AGENDA_SOB_DEMANDA_CONFLITO
            (CUSTOMER_ID,
             ID_AGENDA,
             ID_AGENDA_CANCELADA,
             ID_PROCEDIMENTO,
             FL_AGENDA_SOB_DEMANDA)
          VALUES
            (P_CUSTOMER_ID,
             V_AGENDAMENTO_PRINCIPAL,
             AGENDA.ID_AGENDA,
             AGENDA.ID_PROCEDIMENTO,
             'S');
        
        END IF;
        --AGENDAMENTOS QUE NÂO SÂO DEMANDA PORÈM EXISTEM PACIENTES AGENDADOS.
        IF (AGENDA.ID_PROCEDIMENTO IS NOT NULL AND
           AGENDA.AGENDAMENTO_DEMANDA <> 'S') THEN
          V_AGENDAS_CANC_PROC := V_AGENDAS_CANC_PROC || ',' ||
                                 AGENDA.ID_AGENDA;
          -- INSERE NA TABELA DE CONFLITOS QUAIS AGENDAS FORAM CANCELADAS
          INSERT INTO PSP.AGENDA_SOB_DEMANDA_CONFLITO
            (CUSTOMER_ID,
             ID_AGENDA,
             ID_AGENDA_CANCELADA,
             ID_PROCEDIMENTO,
             FL_AGENDA_SOB_DEMANDA)
          VALUES
            (P_CUSTOMER_ID,
             V_AGENDAMENTO_PRINCIPAL,
             AGENDA.ID_AGENDA,
             AGENDA.ID_PROCEDIMENTO,
             'N');
        END IF;
        --AGENDAMENTOS QUE NÃO POSSUEM PACIENTES. 
        IF AGENDA.ID_PROCEDIMENTO IS NULL AND
           AGENDA.AGENDAMENTO_DEMANDA = 'N' THEN
          V_AGENDAS_CANCELADAS := V_AGENDAS_CANCELADAS || ',' ||
                                  AGENDA.ID_AGENDA;
          -- INSERE NA TABELA DE CONFLITOS QUAIS AGENDAS FORAM CANCELADAS
          INSERT INTO PSP.AGENDA_SOB_DEMANDA_CONFLITO
            (CUSTOMER_ID,
             ID_AGENDA,
             ID_AGENDA_CANCELADA,
             ID_PROCEDIMENTO,
             FL_AGENDA_SOB_DEMANDA)
          VALUES
            (P_CUSTOMER_ID,
             V_AGENDAMENTO_PRINCIPAL,
             AGENDA.ID_AGENDA,
             AGENDA.ID_PROCEDIMENTO,
             'N');
        END IF;
      END LOOP;
      --FIM VERIFICO SE JÁ EXISTE AGENDAMENTO
    END IF;
  
    INSERT INTO PSP.AGENDA
      (CUSTOMER_ID,
       ID_AGENDA,
       DT_AGENDA,
       ID_PRESTADOR,
       ID_TIPO_PROCEDIMENTO,
       ID_LOCALIZACAO,
       AGENDAMENTO_DEMANDA,
       QTDE_PREV_ATENDIMENTOS,
       TEMPO_ATENDIMENTO,
       DS_ORIENTACAO_PACIENTE,
       FL_CONFLITOS_CANCELADOS)
    VALUES
      (P_CUSTOMER_ID,
       V_SEQ_AGENDA_ID,
       P_DATA,
       LISTA_PRESTADORES(I),
       P_ID_TIPO_PROCEDIMENTO,
       P_ID_LOCAL,
       'S',
       1,
       P_TEMPO_PROCEDIMENTO,
       P_ORIENTACAO,
       P_FL_CANCELAR_CONF);
  
    SELECT SEQ_AGENDA_PROCEDIMENTO.NEXTVAL
      INTO V_SEQ_AGENDA_PROCEDIMENTO_ID
      FROM DUAL;
  
    INSERT INTO PSP.AGENDA_PROCEDIMENTO
      (ID, ID_AGENDA, ID_PROCEDIMENTO)
    VALUES
      (V_SEQ_AGENDA_PROCEDIMENTO_ID,
       V_SEQ_AGENDA_ID,
       V_SEQ_PROCEDIMENTO_ID);
  
  END LOOP;

  --INSERE NA TABELA DE PROCEDIMENTO  

  INSERT INTO PSP.PROCEDIMENTOS
    (CUSTOMER_ID,
     ID_PROCEDIMENTO,
     ID_TIPO_PROCEDIMENTO,
     ID_PRESTADOR,
     DT_SOLICITACAO,
     ID_USU_PACIENTE,
     MEMBER_ID,
     CLIENT_ID,
     CLIENT_ID_GROUP,
     DT_PROCEDIMENTO,
     ID_AGENDA,
     OBSERVACAO_AGENDAMENTO)
  VALUES
    (P_CUSTOMER_ID,
     V_SEQ_PROCEDIMENTO_ID,
     P_ID_TIPO_PROCEDIMENTO,
     V_PRESTADOR_PRINCIPAL,
     SYSDATE,
     P_ID_PACIENTE,
     V_MEMBER_ID,
     V_CLIENT_ID,
     V_CLIENT_GROUP_ID,
     P_DATA,
     V_AGENDAMENTO_PRINCIPAL,
     P_OBSERVACAO_AGENDAMENTO);

  --INSERE NA TABELA AGENDA_RECURSOS  
  LISTA_RECURSOS := SPLIT2(P_ID_RECURSOS);
  FOR I IN LISTA_RECURSOS.FIRST .. LISTA_RECURSOS.LAST LOOP
  
    INSERT INTO PSP.AGENDA_RECURSOS
      (CUSTOMER_ID, ID_AGENDA, ID_RECURSO)
    VALUES
      (P_CUSTOMER_ID, V_AGENDAMENTO_PRINCIPAL, LISTA_RECURSOS(I));
  END LOOP;

  -- INSERE NA TABELA PROCEDIMENTO_RECURSOS
  INSERT INTO PSP.PROCEDIMENTOS_RECURSOS
    (CUSTOMER_ID, ID_PROCEDIMENTO, ID_TIPO_PROCEDIMENTO, ID_RECURSO)
    SELECT DISTINCT AGR.CUSTOMER_ID,
                    P.ID_PROCEDIMENTO,
                    P.ID_TIPO_PROCEDIMENTO,
                    RCR.ID_RECURSO
      FROM PSP.AGENDA_RECURSOS AGR
     INNER JOIN PSP.AGENDA A
        ON AGR.ID_AGENDA = A.ID_AGENDA
     INNER JOIN PSP.RECURSOS RCR
        ON RCR.ID_RECURSO = AGR.ID_RECURSO
       AND RCR.CUSTOMER_ID = AGR.CUSTOMER_ID
     INNER JOIN PSP.PROCEDIMENTOS P
        ON P.ID_AGENDA = A.ID_AGENDA
     WHERE AGR.CUSTOMER_ID = P_CUSTOMER_ID
       AND A.ID_AGENDA = V_AGENDAMENTO_PRINCIPAL;

  -- REMOVE O STATUS = 'R' DO PROCEDIMENTO ANTERIOR
  IF P_ID_PROCEDIMENTO_ANTERIOR IS NOT NULL THEN
    UPDATE PSP.PROCEDIMENTOS P
       SET P.ST_PROCEDIMENTO = NULL
     WHERE P.ST_PROCEDIMENTO = 'R'
       AND P.ID_PROCEDIMENTO = P_ID_PROCEDIMENTO_ANTERIOR
       AND P.CUSTOMER_ID = P_CUSTOMER_ID;
  END IF;

  --VERIFICAR CÓPIAS PARA GESTORES DE RECURSOS DO PROCEDIMENTO
  FOR R_REC_GESTORES IN (SELECT DISTINCT PR.CUSTOMER_ID,
                                         PR.ID_PROCEDIMENTO,
                                         PR.ID_TIPO_PROCEDIMENTO,
                                         PR.ID_RECURSO,
                                         RP.ID_PRESTADOR ID_PRESTADOR_GESTOR,
                                         RP.FL_COPIA_DISP_AGENDA
                           FROM PSP.PROCEDIMENTOS_RECURSOS PR
                          INNER JOIN PSP.RECURSOS RCR
                             ON RCR.CUSTOMER_ID = PR.CUSTOMER_ID
                            AND RCR.ID_RECURSO = PR.ID_RECURSO
                          INNER JOIN PSP.RECURSOS_PRESTADORES RP
                             ON RP.CUSTOMER_ID = RCR.CUSTOMER_ID
                            AND RP.ID_RECURSO = RCR.ID_RECURSO
                          WHERE PR.CUSTOMER_ID = P_CUSTOMER_ID
                            AND PR.ID_PROCEDIMENTO = V_SEQ_PROCEDIMENTO_ID
                            AND RP.FL_COPIA_AGENDAMENTO = 'S') LOOP
  
    COPIAR_AGENDA(R_REC_GESTORES.ID_PRESTADOR_GESTOR,
                  R_REC_GESTORES.FL_COPIA_DISP_AGENDA);
  
  END LOOP;

/*CÓPIA DE AGENDAMENTO PARA MÉDICO DO PACIENTE*/
  --CONSULTA PRESTADOR ATUAL VINCULADO AO PACIENTE
  BEGIN
    SELECT P.ID_PRESTADOR
      INTO V_ID_PRESTADOR_PACIENTE
      FROM PHIDBA.MEMBER M
      JOIN IIS.MEMBER_GENERICO MG
        ON M.CUSTOMER_ID = MG.CUSTOMER_ID
       AND M.CLIENT_ID = MG.CLIENT_ID
       AND M.CLIENT_GROUP_ID = MG.CLIENT_GROUP_ID
       AND M.MEMBER_ID = MG.MEMBER_ID
      JOIN DS.MEDICO MED
        ON MED.MEDCRM = MG.CRM
       AND MED.MEDUF = MG.CRM_UF
      JOIN PSP.PRESTADORES P
        ON P.ID_CATEGORIA_PRESTADOR = 1
       AND P.MEDCOD = MED.MEDCOD
     INNER JOIN ACESSO.USUARIO_MEMBER UM
     ON M.CUSTOMER_ID = UM.CUSTOMER_ID
       AND M.CLIENT_ID = UM.CLIENT_ID
       AND M.CLIENT_GROUP_ID = UM.CLIENT_GROUP_ID
       AND M.MEMBER_ID = UM.MEMBER_ID
    WHERE UM.CUSTOMER_ID = P_CUSTOMER_ID
      AND UM.USU_ID = P_ID_PACIENTE
       AND ROWNUM <= 1;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      --SEM PRESTADOR VINCULADO AO PACIENTE
      V_ID_PRESTADOR_PACIENTE := NULL;
  END;

  --ATRIBUIÇÃO DE CÓPIA DE AGENDAMENTO PARA MÉDICO DO PACIENTE
  IF R_TIPO_PROC.FL_GERAR_ACOMP_MEDICO = 'S' AND
     V_ID_PRESTADOR_PACIENTE IS NOT NULL THEN

      COPIAR_AGENDA(V_ID_PRESTADOR_PACIENTE);

  END IF;
/*CÓPIA DE AGENDAMENTO PARA MÉDICO DO PACIENTE*/


  P_AGENDA_CANC_DEMANDA := V_AGENDAS_CANC_DEMAND;
  P_AGENDA_CANC_PROCEDI := V_AGENDAS_CANC_PROC;
  P_AGENDA_CANC         := V_AGENDAS_CANCELADAS;
  P_AGENDA_PRINCIPAL    := TO_CHAR(V_AGENDAMENTO_PRINCIPAL);

EXCEPTION
  WHEN ERR_AGENDA_DEMANDA_CONFLITO THEN
    ROLLBACK;
    P_AGENDA_CANC_DEMANDA := V_AGENDAS_CANC_DEMAND;
    P_AGENDA_CANC_PROCEDI := V_AGENDAS_CANC_PROC;
    P_AGENDA_CANC         := V_AGENDAS_CANCELADAS;
    P_AGENDA_PRINCIPAL    := TO_CHAR(V_AGENDAMENTO_PRINCIPAL);
END;
