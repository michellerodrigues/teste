create or replace PROCEDURE     SP_PROCEDIMENTOS_INS(P_CUSTOMER_ID              IN VARCHAR2,
                                                     P_ID_TIPO_PROCEDIMENTO     IN NUMBER,
                                                     P_ID_PRESTADOR             IN NUMBER,
                                                     P_ID_USU_PACIENTE          IN NUMBER,
                                                     P_MEMBER_ID                IN VARCHAR2,
                                                     P_CLIENT_ID                IN VARCHAR2,
                                                     P_CLIENT_ID_GROUP          IN VARCHAR2,
                                                     P_DT_PROCEDIMENTO          IN DATE,
                                                     P_ID_AGENDA                IN NUMBER,
                                                     P_FL_ORIGEM                IN VARCHAR2,
                                                     P_OBSERVACAO_AGENDAMENTO   IN VARCHAR2,
                                                     P_ID_PROCEDIMENTO_ANTERIOR IN NUMBER,
                                                     OUT_RESULT                 OUT NUMBER,
                                                     OUT_MENSAGEM               OUT VARCHAR2,
                                                     OUT_MEDICO_ALTERADO        OUT VARCHAR2)
/*---------------------------------------------------------------------------------------------------------------------------
          AUTOR:         FRANCO P GONCALES
          DATA CRIACAO:  04/05/2017
          OBJETIVO:      AGENDAR UM PROCEDIMENTO
          ULTIMAS ALTERACOES:
          DATA       NOME              OBJETIVO
          22/08/2017 EDSON MORAIS      INCLUSAO DO PARAMETRO P_OBSERVACAO_AGENDAMENTO
          23/08/2017 EDSON MORAIS      INCLUSAO DE FILTRO DA DT_CANCELAMENTO NO WHERE DA CONSULTA DE PROCEDIMENTO
          29/08/2017 JAELSON FILHO     RETORNO DA INFORMAÇÃO DE ALTERAÇÃO DE MÉDICO
          30/08/2017 JAELSON FILHO     ALTERAÇÃO DAS OBSERVAÇÕES DO AGENDAMENTO
    ----------------------------------------------------------------------------------------------------------------------------
  */
 IS
  V_SEQ_PROCEDIMENTO        NUMBER;
  V_ID_PRESTADOR_PACIENTE   NUMBER;
  V_NOME_PRESTADOR_PACIENTE VARCHAR2(500);
  R_TIPO_PROC               PSP.TIPO_PROCEDIMENTO%ROWTYPE;
  V_OBS_AGENDAMENTO         VARCHAR2(4000) := 'O PROCEDIMENTO SERÁ REALIZADO PELO(A) DR(A). {NOME_PRESTADOR}' ||
                                              CHR(13);

  E_ERRO_AGENDA_DUPL EXCEPTION;

  OUT_RESULT_AUX   NUMBER;
  OUT_MENSAGEM_AUX VARCHAR2(4000);

  PROCEDURE VINCULAR_AGENDA(P_ID_AGENDA_COPIA NUMBER) IS

  BEGIN

    --VINCULA AGENDA AO PROCEDIMENTO COM FLAG DE ACOMPANHAMENTO 'S'
    INSERT INTO PSP.AGENDA_PROCEDIMENTO
      (ID, ID_AGENDA, ID_PROCEDIMENTO, FL_ACOMPANHAMENTO)
    VALUES
      (PSP.SEQ_AGENDA_PROCEDIMENTO.NEXTVAL,
       P_ID_AGENDA_COPIA,
       V_SEQ_PROCEDIMENTO,
       'S');

  END;

  PROCEDURE COPIAR_AGENDA(P_ID_PRESTADOR_COPIA NUMBER,
                          P_VERIF_DISP         VARCHAR2 DEFAULT 'N')

   IS

    E_PREST_JA_ASSOCIADO EXCEPTION;
    V_ID_AGENDA_COPIA NUMBER := NULL;

  BEGIN

    IF P_ID_PRESTADOR_COPIA = P_ID_PRESTADOR THEN
      --PRESTADOR JÁ ASSOCIADO AO PROCEDIMENTO PRINCIPAL, NÃO É NECESSÁRIO COPIAR AGENDA
      RAISE E_PREST_JA_ASSOCIADO;
    END IF;

    V_OBS_AGENDAMENTO := 'O PROCEDIMENTO SERÁ REALIZADO PELO(A) DR(A). {NOME_PRESTADOR}' ||
                         CHR(13);

    IF P_VERIF_DISP = 'N' THEN
      --SE NÃO FOR DE ACORDO COM A DISPONIBILIDADE ENTÃO SE CRIA UMA AGENDA

      SELECT PSP.SEQ_AGENDA.NEXTVAL INTO V_ID_AGENDA_COPIA FROM DUAL;

      --GERAR CÓPIA DE AGENDA PARA PRESTADOR
      INSERT INTO PSP.AGENDA
        (CUSTOMER_ID,
         ID_AGENDA,
         DT_AGENDA,
         ID_PRESTADOR,
         ID_TIPO_PROCEDIMENTO,
         ID_LOCALIZACAO,
         AGENDAMENTO_DEMANDA,
         QTDE_PREV_ATENDIMENTOS,
         TEMPO_ATENDIMENTO,
         DS_ORIENTACAO_PACIENTE,
         FL_CONFLITOS_CANCELADOS)
        SELECT CUSTOMER_ID,
               V_ID_AGENDA_COPIA,
               DT_AGENDA,
               P_ID_PRESTADOR_COPIA,
               ID_TIPO_PROCEDIMENTO,
               ID_LOCALIZACAO,
               AGENDAMENTO_DEMANDA,
               QTDE_PREV_ATENDIMENTOS,
               TEMPO_ATENDIMENTO,
               DS_ORIENTACAO_PACIENTE,
               FL_CONFLITOS_CANCELADOS
          FROM PSP.AGENDA A
         WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
           AND A.ID_AGENDA = P_ID_AGENDA;

    ELSE

      BEGIN

        SELECT A.ID_AGENDA
          INTO V_ID_AGENDA_COPIA
          FROM PSP.AGENDA A
         WHERE A.CUSTOMER_ID = P_CUSTOMER_ID
           AND A.ID_PRESTADOR = P_ID_PRESTADOR_COPIA
           AND A.DT_AGENDA = P_DT_PROCEDIMENTO
           AND A.DT_CANCELAMENTO IS NULL
           AND (A.ID_TIPO_PROCEDIMENTO = P_ID_TIPO_PROCEDIMENTO OR
               P_ID_TIPO_PROCEDIMENTO IN
               (SELECT ATP.ID_TIPO_PROCEDIMENTO
                   FROM PSP.AGENDA_TIPOS_PROCEDIMENTOS ATP
                  WHERE ATP.CUSTOMER_ID = A.CUSTOMER_ID
                    AND ATP.ID_AGENDA = A.ID_AGENDA))
           AND NOT EXISTS (SELECT 1
                  FROM PSP.PROCEDIMENTOS P
                 WHERE P.CUSTOMER_ID = P_CUSTOMER_ID
                   AND P.ID_AGENDA = A.ID_AGENDA)
           AND NOT EXISTS
         (SELECT 1
                  FROM PSP.AGENDA_PROCEDIMENTO AP
                  JOIN PSP.PROCEDIMENTOS PROC
                    ON PROC.ID_PROCEDIMENTO = AP.ID_PROCEDIMENTO
                 WHERE AP.ID_AGENDA = A.ID_AGENDA
                   AND PROC.DT_CANCELAMENTO IS NULL
                   AND NVL(AP.FL_ACOMPANHAMENTO, 'N') = 'N')
           AND ROWNUM <= 1;

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_ID_AGENDA_COPIA := NULL;
      END;

    END IF;

    IF V_ID_AGENDA_COPIA IS NOT NULL THEN

      VINCULAR_AGENDA(V_ID_AGENDA_COPIA);

    END IF;

  EXCEPTION
    WHEN E_PREST_JA_ASSOCIADO THEN
      NULL;

  END;

BEGIN

  OUT_RESULT          := 0;
  OUT_MENSAGEM        := 'FALHA NA INCLUSÃO DO AGENDAMENTO DO PROCEDIMENTO.';
  OUT_MEDICO_ALTERADO := 'N';
  V_OBS_AGENDAMENTO   := NULL;

  BEGIN
    SELECT P.ID_PROCEDIMENTO
      INTO V_SEQ_PROCEDIMENTO
      FROM PSP.PROCEDIMENTOS P
     WHERE P.ID_AGENDA = P_ID_AGENDA
       AND P.DT_CANCELAMENTO IS NULL;

    RAISE E_ERRO_AGENDA_DUPL;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;

  END;

  SELECT *
    INTO R_TIPO_PROC
    FROM PSP.TIPO_PROCEDIMENTO TP
   WHERE TP.ID_TIPO_PROCEDIMENTO = P_ID_TIPO_PROCEDIMENTO;

  SELECT PSP.SEQ_PROCEDIMENTOS.NEXTVAL INTO V_SEQ_PROCEDIMENTO FROM DUAL;

  INSERT INTO PSP.PROCEDIMENTOS
    (ID_PROCEDIMENTO,
     CUSTOMER_ID,
     ID_TIPO_PROCEDIMENTO,
     ID_PRESTADOR,
     DT_SOLICITACAO,
     ID_USU_PACIENTE,
     MEMBER_ID,
     CLIENT_ID,
     CLIENT_ID_GROUP,
     DT_PROCEDIMENTO,
     ID_AGENDA,
     FL_ORIGEM,
     OBSERVACAO_AGENDAMENTO)
  VALUES
    (V_SEQ_PROCEDIMENTO,
     P_CUSTOMER_ID,
     P_ID_TIPO_PROCEDIMENTO,
     P_ID_PRESTADOR,
     SYSDATE,
     P_ID_USU_PACIENTE,
     P_MEMBER_ID,
     P_CLIENT_ID,
     P_CLIENT_ID_GROUP,
     P_DT_PROCEDIMENTO,
     P_ID_AGENDA,
     P_FL_ORIGEM,
     P_OBSERVACAO_AGENDAMENTO);

  -- REMOVE O STATUS = 'R' DO PROCEDIMENTO ANTERIOR
  IF P_ID_PROCEDIMENTO_ANTERIOR IS NOT NULL THEN
    UPDATE PSP.PROCEDIMENTOS P
       SET P.ST_PROCEDIMENTO = NULL
     WHERE P.ST_PROCEDIMENTO = 'R'
       AND P.ID_PROCEDIMENTO = P_ID_PROCEDIMENTO_ANTERIOR
       AND P.CUSTOMER_ID = P_CUSTOMER_ID;
  END IF;

  --VINCULO DE RECURSOS PARA O PROCEDIMENTO CONFORME O PROCEDIMENTO E RECURSOS DA AGENDA ORIGINAL
  BEGIN

    INSERT INTO PSP.PROCEDIMENTOS_RECURSOS
      (CUSTOMER_ID, ID_PROCEDIMENTO, ID_TIPO_PROCEDIMENTO, ID_RECURSO)
      SELECT DISTINCT AGR.CUSTOMER_ID,
                      V_SEQ_PROCEDIMENTO,
                      TPR.ID_TIPO_PROCEDIMENTO,
                      RCR.ID_RECURSO
        FROM PSP.AGENDA_RECURSOS AGR
       INNER JOIN PSP.RECURSOS RCR
          ON RCR.ID_RECURSO = AGR.ID_RECURSO
         AND RCR.CUSTOMER_ID = AGR.CUSTOMER_ID
       INNER JOIN PSP.TIPO_PROCEDIM_RECURSOS TPR
          ON TPR.ID_TIPO_RECURSO = RCR.ID_TIPO_RECURSO
         AND TPR.CUSTOMER_ID = RCR.CUSTOMER_ID
       WHERE AGR.ID_AGENDA = P_ID_AGENDA
         AND AGR.CUSTOMER_ID = P_CUSTOMER_ID
         AND TPR.ID_TIPO_PROCEDIMENTO = P_ID_TIPO_PROCEDIMENTO;

  EXCEPTION
    WHEN OTHERS THEN
      NULL;

  END;

  --CONSULTA PRESTADOR ATUAL VINCULADO AO PACIENTE
  BEGIN
    SELECT P.ID_PRESTADOR
      INTO V_ID_PRESTADOR_PACIENTE
      FROM PHIDBA.MEMBER M
      JOIN IIS.MEMBER_GENERICO MG
        ON M.CUSTOMER_ID = MG.CUSTOMER_ID
       AND M.CLIENT_ID = MG.CLIENT_ID
       AND M.CLIENT_GROUP_ID = MG.CLIENT_GROUP_ID
       AND M.MEMBER_ID = MG.MEMBER_ID
      JOIN DS.MEDICO MED
        ON MED.MEDCRM = MG.CRM
       AND MED.MEDUF = MG.CRM_UF
      JOIN PSP.PRESTADORES P
        ON P.ID_CATEGORIA_PRESTADOR = 1
       AND P.MEDCOD = MED.MEDCOD
     WHERE M.CUSTOMER_ID = P_CUSTOMER_ID
       AND M.CLIENT_ID = P_CLIENT_ID
       AND M.CLIENT_GROUP_ID = P_CLIENT_ID_GROUP
       AND M.MEMBER_ID = P_MEMBER_ID
       AND ROWNUM <= 1;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      --SEM PRESTADOR VINCULADO AO PACIENTE
      V_ID_PRESTADOR_PACIENTE := NULL;
  END;

  --ATRIBUIÇÃO DE MÉDICO CONFORME EXECUCAO DE PROCEDIMENTO
  IF R_TIPO_PROC.FL_DEFINE_MEDICO = 'S' THEN

    IF NVL(V_ID_PRESTADOR_PACIENTE, 0) <> P_ID_PRESTADOR THEN

      --ATRIBUI O MÉDICO AO PACIENTE
      PSP.SP_PRESTADOR_MEDICO_INS(P_CUSTOMER_ID,
                                  P_CLIENT_ID,
                                  P_CLIENT_ID_GROUP,
                                  P_MEMBER_ID,
                                  P_ID_PRESTADOR,
                                  OUT_RESULT_AUX,
                                  OUT_MENSAGEM_AUX);

      V_ID_PRESTADOR_PACIENTE := P_ID_PRESTADOR;

      OUT_MEDICO_ALTERADO := 'S';

    END IF;

  END IF;

  --VERIFICAR CÓPIAS PARA GESTORES DE RECURSOS DO PROCEDIMENTO
  FOR R_REC_GESTORES IN (SELECT DISTINCT PR.CUSTOMER_ID,
                                         PR.ID_PROCEDIMENTO,
                                         PR.ID_TIPO_PROCEDIMENTO,
                                         PR.ID_RECURSO,
                                         RP.ID_PRESTADOR ID_PRESTADOR_GESTOR,
                                         RP.FL_COPIA_DISP_AGENDA
                           FROM PSP.PROCEDIMENTOS_RECURSOS PR
                          INNER JOIN PSP.RECURSOS RCR
                             ON RCR.CUSTOMER_ID = PR.CUSTOMER_ID
                            AND RCR.ID_RECURSO = PR.ID_RECURSO
                          INNER JOIN PSP.RECURSOS_PRESTADORES RP
                             ON RP.CUSTOMER_ID = RCR.CUSTOMER_ID
                            AND RP.ID_RECURSO = RCR.ID_RECURSO
                          WHERE PR.CUSTOMER_ID = P_CUSTOMER_ID
                            AND PR.ID_PROCEDIMENTO = V_SEQ_PROCEDIMENTO
                            AND RP.FL_COPIA_AGENDAMENTO = 'S') LOOP

    IF NVL(V_ID_PRESTADOR_PACIENTE, 0) <>
       R_REC_GESTORES.ID_PRESTADOR_GESTOR THEN
      COPIAR_AGENDA(R_REC_GESTORES.ID_PRESTADOR_GESTOR,
                    R_REC_GESTORES.FL_COPIA_DISP_AGENDA);
    END IF;

  END LOOP;

  --ATRIBUIÇÃO DE CÓPIA DE AGENDAMENTO PARA MÉDICO DO PACIENTE
  IF R_TIPO_PROC.FL_GERAR_ACOMP_MEDICO = 'S' AND
     NVL(V_ID_PRESTADOR_PACIENTE, 0) <> P_ID_PRESTADOR THEN

    IF V_ID_PRESTADOR_PACIENTE IS NOT NULL THEN
      COPIAR_AGENDA(V_ID_PRESTADOR_PACIENTE);
    END IF;

  END IF;

  IF V_OBS_AGENDAMENTO IS NOT NULL THEN
    BEGIN
      SELECT P.DS_NOME_PRESTADOR
        INTO V_NOME_PRESTADOR_PACIENTE
        FROM PSP.PRESTADORES P
       WHERE P.ID_PRESTADOR = P_ID_PRESTADOR;

      SELECT REPLACE(V_OBS_AGENDAMENTO,
                     '{NOME_PRESTADOR}',
                     V_NOME_PRESTADOR_PACIENTE)
        INTO V_OBS_AGENDAMENTO
        FROM DUAL;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        V_NOME_PRESTADOR_PACIENTE := NULL;
    END;

    --ATUALIZAR A DESCRIÇÃO DO PROCEDIMENTO
    UPDATE PSP.PROCEDIMENTOS P
       SET P.OBSERVACAO_AGENDAMENTO = V_OBS_AGENDAMENTO ||
                                      P_OBSERVACAO_AGENDAMENTO
     WHERE P.ID_PROCEDIMENTO = V_SEQ_PROCEDIMENTO
       AND P.CUSTOMER_ID = P_CUSTOMER_ID;
  END IF;

  OUT_RESULT   := V_SEQ_PROCEDIMENTO;
  OUT_MENSAGEM := 'SUCESSO NA INCLUSÃO DO AGENDAMENTO DO PROCEDIMENTO';

EXCEPTION
  WHEN E_ERRO_AGENDA_DUPL THEN
    OUT_RESULT   := -1;
    OUT_MENSAGEM := 'Agendamento prestador/horário e procedimento não disponível.';
    RAISE_APPLICATION_ERROR(-20000, OUT_MENSAGEM);
  WHEN OTHERS THEN
    OUT_RESULT   := -1;
    OUT_MENSAGEM := 'ERRO EM PSP.SP_PROCEDIMENTOS_INS' || CHR(13) ||
                    'COD. ERRO     : ' || TO_CHAR(SQLCODE) || CHR(13) ||
                    'MENSAGEM. ERRO: ' || SQLERRM || CHR(13) ||
                    'PARAMETROS: ' || CHR(13) ||
                    'P_CUSTOMER_ID            = ' || P_CUSTOMER_ID ||
                    CHR(13) || 'P_ID_TIPO_PROCEDIMENTO              = ' ||
                    P_ID_TIPO_PROCEDIMENTO || CHR(13) ||
                    'P_ID_PRESTADOR           = ' || P_ID_PRESTADOR ||
                    CHR(13) || 'P_ID_TIPO_PROCEDIMENTO   = ' ||
                    P_ID_TIPO_PROCEDIMENTO || CHR(13) ||
                    'P_ID_USU_PACIENTE         = ' || P_ID_USU_PACIENTE ||
                    CHR(13) || 'P_MEMBER_ID = ' || P_MEMBER_ID || CHR(13) ||
                    'P_CLIENT_ID = ' || P_CLIENT_ID || CHR(13) ||
                    'P_CLIENT_ID_GROUP = ' || P_CLIENT_ID_GROUP || CHR(13) ||
                    'P_DT_PROCEDIMENTO = ' || P_DT_PROCEDIMENTO || CHR(13) ||
                    'P_ID_AGENDA = ' || P_ID_AGENDA || CHR(13);

    RAISE_APPLICATION_ERROR(-20000, OUT_MENSAGEM);
END;